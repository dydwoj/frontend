<< CSS >> (Cascading Stlye Sheets)
    참고 : tag, all, id
    * 태그 해석 : 위에서 아래로
        but. inline 태그의 우선순위가 높음
    
    - 태그 단축키
        1) h1#title : h1 의 id는 title
        2) h1.title : h1 의 class는 title
        3) ul>li*숫자 : ul 안에 li 를 숫자 개수만큼 만들기

    - 자동완성으로 태그 만들기
        * h1.title.title => class="title title" 로 나옴
            => . 두번째 점부터 공백을 의미
            => 위의 공백은 title 클래스가 2개인 것임
            => 공백을 기준으로 클래스가 나뉘어짐
        * .row>.column*4?>h2{Column $}+p{Some text...}
            => <div class="row">
                    <div class="column">
                        <h2>Column 1</h2>
                        <p>Some text...</p>
                    </div>
                    <div class="column">
                        <h2>Column 2</h2>
                        <p>Some text...</p>
                    </div>
                    <div class="column">
                        <h2>Column 3</h2>
                        <p>Some text...</p>
                    </div>
                    <div class="column">
                        <h2>Column 4</h2>
                        <p>Some text...</p>
                    </div>
                </div>

    - css 작성 위치
        1) head 태그 안 : 길지 않다면 추천
            style tag 사용 => <style> ~~~ </style>
        2) inline 처리 : 추천
            직접 태그 안에 style tag 사용 => style=""
        3) 외부파일 : 추천
            => <link rel="stylesheet" href="파일명.css" />
            => css 파일 안에 => 태그선택자 {}

    - css 디자인을 반영할 요소 선택
        참고 : css/selector

        1) 태그선택자
            참고 : tag
            => 하나의 태그가 하나만 있을 때 유용 but. 같은 태그 여러개는 불편
                - 태그명 {}

        2) id, class 선택자
            참고 : id
            id == #
            class == .
                - #태그명 {}
                - .태그명 {}

        3) all 선택자 : body 전체에 style 을 입힘
            참고 : all
                - * {}
                - 태그명 * {} => 특정 태그의 전체도 가능
        
        4) 자식 / 자손 선택자
            참고 : child
            => body 자식 : h1, h2, div => >
                => 태그명1 > 태그명2 => 태그명1의 바로 아래에 있는 태그명2만 선택
            => body 자손 : h1, h2, div, p => 공백 한칸
            => id 명이나 class 명의 자손들도 가능
                - 자식 : >
                - 자손 : 공백한칸
        
        5) 형제 선택자
            참고 : sibling
            1. 인접 형제 선택자 : +
                - 태그명1 + 태그명2
                    => 태그명1에 뒤따라오는 태그명2만 선택
            2. 모든 형제 선택자 : ~
                - 태그명1 ~ 태그명2
                    => 태그명1 뒤에 따라오는 모든 태그명2 선택

        6) 그룹 선택자
            참고 : group
            - 선택자1, 선택자2, ...
                => 하는 동작이 같으면 (,) 로 묶어서 한번에 줄 수 있다

        7) 속성 선택자
            참고 : attr
            1. [속성명]
                ex. [target] {}
            2. [속성명=값]
                ex. [target="_blank"]
            3. [속성명~값]
                => 값의 요소가 포함된 모든 요소 선택
                => 정확하게 값의 이름이 일치해야 함
                ex. [title~="soala"]
            4. [속성명^=값]
                => 특정 값으로 시작하는
                ex. [class^="test"]
            5. [속성명$=값]
                => 특정 값으로 끝나는
                ex. [class$="test"]
            6. [속성명*=값]
                => 특정 값이 포함된
                => ~ 과는 다르게 특정 값이 포함 되기만 하면 OK
        
        8) 가상(Pseudo)클래스 선택자
            참고 : pseudo1,2
            => 다른 : 요소들과 연달아서 사용 가능

            - a tag
                1. :link
                2. :active
                3. :visited

            - 다른 요소 (모든 태그에 가능)
                1. :hover
                    => 특정 요소에 마우스가 올라간 상황
                2. :focus
                    => 특정 요소에 초점이 맞춰진 상황
            
            - ui 변화
                1. :disabled
                2. :checked
                    => radio, checkbox 요소가 선택된 상황

        9) 가상 요소 선택자
            참고 : pseudo3
            => css 내에 존재하지 않지만 가상으로 넣어다는 의미

            1. ::before
            => 다양한게 들어올 수 있음
                ex. 글자, 이미지...
            2. ::after
        
        10) 구조 선택자
            참고 : struct1
            => 구조이기에 안에 li, p, div 를 섞어 쓴다고 해도 각 구조의 몇번째 인지에 따라서 정해짐

            1. :first-child
            2. :last-child
            3. :nth-child(n)
                => n : 0부터 시작함
                    2n : 짝수
                    2n + 1 : 홀수
                * n 한테 - 붙이기도 가능
                    => 숫자가 0이 되는 시점부터 무시함

        11) 형태구조 선택자
            참고 : struct2
            => 태그명 사용
            => 태그로 찾는 것 => 구조 선택자와 달리 타입을 찾기에 여러개를 섞어서 사용하면 그 중 첫 타입을 지정함

            1. first-of-type
            2. last-of-type
            3. nth-of-type(n)
                => 앞에서부터
            4. nth-last-of-type(n)
                => 뒤에서부터

        12) 부정 선택자
            참고 : not

            1. :not()
                ex. E:not(S)
                    => S가 아닌 E 선택
                    => E를 안주면 S가 아닌 모든 것이 변환됨

    - 디자인
        참고 : css/basic

        - color
            참고 : basic

            1. 색상명
                => red, blue...
            2. 16진수
                => #13ffee
            3. RGB
                => rgb(0,255,0)
                => rgba(0,255,0,0.5)

        - 단위
            참고 : basic
            * default font-size : 16pt

            1) px : 고정
                => 브라우저 크기를 줄이면 줄인 방향으로 스크롤 생김
            2) % : 상대적인 형태로 잡기
                => 브라우저 크기에 따라 자동으로 줄바꿈
                => 부모가 만들어준 공간에서의 비율을 의미
                    => 브라우저의 공간이 아닌 내가 만들어 놓은 body 내의 공간까지의 크기를 의미함
            3) em : em 단위가 쓰여진 곳에 폰트 사이즈 배수
                참고 : em
                => 즉 h1 태그는 2em => 이걸 18px로 바꾸기 => 18px * 2em
                => 픽셀 단위로 설정하면 나중에 한번에 교정할 때 힘듬
                    => em 단위로 사용하면 기본 16px 에서 * ?em 하면 되니까 훨씬 쉬움
            4) rem : 루트 요소의 크기를 기준으로 함
                참고 : em
                => :root {} => 내부에 어떤 사이즈를 주는지에 따라 rem 값이 달라진다
            5) vw (viewport width), vh (viewport height)
                참고 : vw
                => 화면 기준으로 잡아줌

                * viewport : 내가 만든 body내용의 크기가 아닌 화면단에 나오는 화면 전체의 공간을 의미
        
        - 상속
            참고 : inherit
            => 글자와 관련된 속성들이 주로 상속을 가짐

            - 우선순위
                - 선택자가 같은 경우
                    => 기본적으로 위에서 아래로 흐름

                - 선택자가 다른 경우
                    1. 명시도 점수가 높은 선언이 우선
                    2. 점수가 같은 경우 마지막에 해석되는 선언이 우선
                    3. 명시도는 상속 규칙보다 우선
                    4. !important 가 적용된 선언 방식이 최우선

                    - 명시도 점수 선정의 기준
                        1. important
                            => 디자인 선언 후 뒤에 !important;
                        2. 인라인선언
                        3. 아이디 => 100 정도
                        4. 클래스 => 10 정도
                        5. 태그
                        6. 전체
                        7. 상속

    - Style
        참고 : css/style

        - font
            참고 : Style

            1) serif : 바탕체
            2) sans-serif : 고딕체
            3) monospace : 고정너비 글꼴
            4) cursive : 필기체

            - 속성
                1) font-size : 크기
                    => default : 16px
                2) font-style : 글자 기울기
                    2-1. italic : 기울임
                3) font-weight : 굵기
                    => default : 400px
                4) font-family : 글꼴
                    => 글꼴 하나에 공백이 있을 경우 "" 로 묶는다
                5) line-height : 글자 위아래 사이 여백 높이
                    => 글자 크기가 커질 수록 글저 사이 여백은 좁아진다
                        => line-height 크기 - 글자 크기 = 여백의 크기
                    => 고정크기
                        => 변동성 주기 : px 단위가 아닌 1.5 같이 주기


        - text
            참고 : text

            1) text-align : 정렬
                * justify : 양쪽 정렬
            2) text-decoration
                2-1. none : a태그와 함께 밑줄 제거에 많이 사용
                2-2. underline : 밑줄
                2-3. line-through : 가운데 선
            3) letter-spacing : 글자 간격
            4) word-spacing : 단어 간격
            5) text-shadow : 글자에 그림자 주기(색깔도 가능)
            6) text-transform : 형태변환
                6-1. uppercase/lowercase : 대/소문자 변환
                6-2. capitalize : 단어의 첫글자만 대문자로 변환

        - background
            참고 : background

            1) background-color : 배경색
                * background 에 따로 컬러를 줄 수도 있음
            2) background-image : 이미지 주기
                => url() 과 함께 사용
                - 우리가 잡은 크기보다 작은 경우
                    - 기본
                        남는 픽셀만큼 이미지를 바둑판 형식으로 반복해서 채움
                    - 반복
                        background-repeat
                            1. no-repeat : 반복 X
                            2. repeat-x : x축 반복
                            3. repeat-y : y축 반복
                    - 위치
                        background-position
                            => 뒤에 + x y
                                ex. right top
                    - 축약형
                        background: url() 반복성 x y
                            ex. background: url(../../image/bg.png) no-repeat center center
                
                - 우리가 잡은 크기보다 큰 경우
                    => 사진의 일부가 잘려져서 나온다
                    - 조절
                        background-size
                            1. auto : default값 => 사진의 일부분만 잘라서 사용
                            2. cover : 도형에 맞춰서 사진을 자름
                            3. contain : 사진에 맞춰서 도형에 넣고 남는 자리 반복(일부분 잘림)
            3) background-attachment
                3-1. scroll : 기본값
                3-2. fixed : 스크롤을 내려도 사진이 상단에 고정

        - table
            참고 : table
            => width : table에서 넓이는 내용의 넓이에 맞춰짐

            1) border : 선 넣기
                solid : 실선
                dotted : 점선
                dashed : - 선
                double : 2중선
            2) border-collapse : 선이 두개로 나오는걸 하나로 합침
                => radius 가 안 먹음
            3) border-radius : 모서리를 둥그렇게 만듬
            4) padding : 안쪽 여백크기
                => 어디서든 안쪽의 여백은 padding

        - padding, margin
            참고 : padding, margin

            * 화면의 기본적인 margin 과 padding 삭제
                => * {margin: 0;
                      padding: 0;}

            - padding : 안쪽 여백
                기본 : 수치만 입력
                두개만 입력 : top(bottom) / right(left) 끼리 입력됨
                    ex. 15px 10px => top(bottom) : 15 / right(left) : 10px
                세개만 입력 : top / bottom / right(left) 끼리 입력 됨
                시계방향 : (top, right, bottom, left)
                    ex. padding: 10px 5px 15px 10px;
                
                - 특징
                block(p, div...) : 한 행 다 사용
                    width : 100%
                    height : 0 => 내용만큼만 사용 / 지정 가능
                inline(a, span...) : 내용만큼만 사용
                    width, height 를 가질 수 없음
                    상/하 padding 가질 수 없음
                    사용하면 다른 곳에 침범
                    * inline 태그들은 이어서 쓰면 자동으로 공백이 들어감

            - margin : 바깥쪽 여백
                => margin 중복(병합) : margin 의 특정 값들이 중복되어 합쳐지는 현상
                    1. 형제요소들의 margin-top 과 margin-bottom 이 만났을 때
                    2. 부모 요소의 margin-top 과 자식 요소의 margin-top 이 만났을 때
                    3. 부모 요소의 margin-bottom 과 자식 요소의 margin-bottom 이 만났을 때
                    * 좌/우는 중복 현상 안 일어남!
                        => 둘의 값이 더해짐

                기본 : 수치만 입력
                두개만 입력 : top(bottom) / right(left) 끼리 입력됨
                    ex. 15px 10px => top(bottom) : 15 / right(left) : 10px
                세개만 입력 : top / bottom / right(left) 끼리 입력 됨
                시계방향 : (top, right, bottom, left)
                    ex. padding: 10px 5px 15px 10px;

                * margin: 0 auto : 화면 가운데 (수평)

        - display
            참고 : padding
            inline 이 가지지 못하는 padding 을 가지게 해줌

            1) inline
            2) block : 한행을 가지게 됨
            3) inline-block : inline 특성을 가지면서(한행에 같이 나오는), 블럭처리
            4) none : 내용을 안보이게 함 (요소 감춤)
                => 위치의 공간까지 전부 감춤

        - visibility
            참고 : padding

            1) hidden : 요소 감춤
                => 위치한 공간은 가진다

        - border
            참고 : border

            1) border : 기본
                => 두께, 선 종류 줄 수 있음
            2) border-style : 선 종류 설정
                solid : 실선
                dotted : 점선
                dashed : - 선
                double : 2중선
            3) border-width : 선의 두께 설정
                => padding, margin 처럼 시계방향으로 줄 수 있음
            4) border-color : 선 색깔 설정
                => padding, margin 처럼 시계방향으로 줄 수 있음
            5) border-top/right/bottom/left : 각 방향만 지정
                => 스타일, 컬러 등 방향별로 설정 가능
            6) border-radius : 모서리를 둥글게 설정
                => padding, margin 처럼 시계방향으로 줄 수 있음

        - box
            참고 : boxmodel, margin
            => 요소의 크기의 결정
                width + border + padding

            * 자신은 부모가 내려준 공간에 별도로 공간 입력 안하면 그대로 공간 사용
                자식의 width 가 부모의 width 보다 크면 뚫고 지나감
                => max-width 를 사용해서 못 뚫고 지나가게 막을 수 있음
                    => 최대 너비 보장
                => min-width 를 사용해서 뚫고 나갈 수 있음
                    => 최소 너비 보장

            1) box-sizing : 박스크기 결정
                => boxmodeling 이라고 함
                1-1. border-box
                    => content + padding + border
                1-1. border-box

        - overflow
            참고 : overflow
            => 부모가 내려준 공간에서 자식(content)이 넘치는 경우

            1) visible : default 값
                => 넘치는 부분을 다 보여줌
            2) hidden : 숨기기
                => 넘치는 부분을 다 숨김
            3) scroll : 스크롤 형식으로 나옴 (가로, 세로 다 해줌)
                => 감춘 부분을 스크롤로 모두 볼 수 있게 해줌
            4) auto
                => 넘친 부분의 스크롤만 나옴

        - float
            참고 : float1,2,3
            1) left : 왼쪽에 띄움
            1) right : 오른쪽에 띄움

            => 따로 공간을 잡아주는게 아닌 공간위에 떠 있는 경우
            => 떠 있다고 생각하기 때문에 무엇인가를 작성해도 겹쳐지는 경우가 있음
                => 부모-자식 관계에서 부모 입장에서는 자식이 없다고 인식함
                    => overflow : hidden 으로 해결은 되나 다음 요소에 영향을 줌
            => inline 요소들에 float를 주면 block 형태로 들어감

            - 해결
                => 태그명 뒤의 요소들에 영향을 줌
                태그명::after {
                    content: "";
                    clear: both;
                        => float 로 흘렀던 left, right 둘다 해제
                    display: block;
                }
        
        - position
            참고 : position1, fixed, absolute1,2
            => 요소의 위치 지정

            1) static : default 값
            2) fixed : 브라우저(뷰포트)를 기준으로 배치
            3) absolute : 위치상 부모 요소를 기준으로 배치
                => 부모가 없을 경우 브라우저(뷰포트)가 부모임
            4) relative : 요소 자신을 기준으로 배치

            * calc() : 숫자계산을 해주는 함수
            * white-space: nowrap; : 공백을 기준으로 엔터처리하지 말것

        - z-index
            참고 : zindex
            => position이 적용된 요소의 쌓임에서 우선순위 조정
            => 숫자가 클수록 가장 위에 쌓임

        - flex : float 처럼 옆으로 옮기는 개념
            참고 : flex
            => 부모에 대입을 함 => 즉, 자식들을 옆으로 줄세움

            - 수평배치 : float, inline-block 사용
                => float 같은 경우 : 해제 코드 필요(clear both)
                => inline-block 같은 경우 : 자동처리되는 공백이 있음
                => 다음 요소에 미치는 영향에 대한 고려를 안해도 됨

                - 개선된 수평 배치 : flex
                    1) 컨테이너(상하, 좌우 배치되어야 할 아이템을 가지고 있는 부모 요소)
                        1. display
                        2. flex-direction
                            2-1. row : 좌우 배치(default)
                            2-2. row-reverse : 좌우 배치 (역순)
                            2-3. colum : 상하 배치
                            2-4. colum-reverse : 상하 배치 (역순)
                        3. flex-wrap
                            3-1. nowrap : 부모 크기가 줄어들면 자식도 같이 줄어든다 (default)
                            3-2. wrap : 크기를 유지
                            3-3. wrap-reverse : 역순으로 내려감
                        4. justify-content (가로축)
                            4-1. flex-start : 왼쪽 정렬
                            4-2. flex-end : 오른쪽 정렬
                            4-3. flex-center : 가운데 정렬
                            4-4. space-around : 요소들의 좌우 여백을 동일하게
                                => 중첩되는 영역은 다른 영역보다 커짐
                                => 양끝 마진 제외
                            4-5. space-evenly : 모든 요소의 공백을 동일하게
                                => 양끝 마진까지
                            4-6. space-between : 첫요소와 마지막 요소는 양쪽 끝으로 붙임
                                => 양끝 마진 없이
                        5. align-content (세로축)
                            => flex-wrap => wrap 상태에서 교차 축의 정렬 방법
                            5-1. flex-start : 왼쪽 정렬
                            5-2. flex-end : 오른쪽 정렬
                            5-3. flex-center : 가운데 정렬
                            5-4. space-around : 요소들의 좌우 여백을 동일하게
                                => 중첩되는 영역은 다른 영역보다 커짐
                                => 양끝 마진 제외
                            5-5. space-evenly : 모든 요소의 공백을 동일하게
                                => 양끝 마진까지
                            5-6. space-between : 첫요소와 마지막 요소는 양쪽 끝으로 붙임
                                => 양끝 마진 없이

                        - 그 외
                            - 글자 가운데 오게 하기
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                    => 한줄일 때 정렬=

                        * wrap : 엔터랑 관여됨
                        * 주축 : display:row 일 때 : x 축 / display:colum 일 때 : y 축
                          교차축 : display:row 일 때 : y축 / display:colum 일 때 : x 축
                        * 글자 가운데
                    2) 아이템
                        1. order
                            => default : 0
                            => 기본 순서는 태그 순서
                            => 숫자가 클 수록 뒷쪽에 놓임
                            => 마이너스(-) 일 때는 반대
                        2. flex-grow
                            => 자식 요소들의 컨텐츠를 제외한 영역들의 공간이 1로 같아짐
                            => 아이템 기준으로 주면 비율형태로 공간을 계산
                        3. flex-basis
                            => 전체 너비의 비율
                            => 0 : 자식 요소들의 컨텐츠를 포함한 모든 영역들의 공간이 1로 같아짐
                        4. flex-shrink
                            => 감소비율 지정
                        - 축약형 : flex: 1(grow) 1(shrink) auto(basis)

        - media
            참고 : media
            
            - 기본
                @media 를 통해 호출
                    1. screen
                        ex. @media screen and (max-width: 768px) {} => 스크린 너비에 따른 화면 설정
                            => {} 안에 변경할 내용 넣기

                    





























            


            


        







