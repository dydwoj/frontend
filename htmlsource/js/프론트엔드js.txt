<< JS (Java Script) >>
    => 동적 작업 담당
        ex. 버튼 클릭시 메세지 띄우기
    => HTML 안에 작성 가능 : 웹페이지를 불러올 때, 스크립트가 자동 실행
    => 코드는 java 언어와 비슷함
    => 서버에서도 실행 가능 : NodeJS (JS를 서버쪽으로 실행가능하게 만든 것)
    => 자바스크립트 실행(런타임)환경
        1) 브라우저
        2) Node.js
            => 폴더를 기준으로 open in integrated terminal 실행
            => 터미널에 node script.js 입력
            => .js 파일 실행함

    * 위에서 아래로 실행됨
    * 주석 : // (자바와 같음)
    * ( ; ) 의 사용이 필수가 아님
        => 줄바꿈이 있다면 세미콜론 생략가능
        => 엔터의 유무에 따라 js가 알아서 넣어줌
    * '', "" : 둘다 허용 => 문자열 취급

    - 선언위치
        => 선언의 위치 중요!
        1) head tag 안
        2) body tag 안
            => /body(닫는body) 앞쪽에 선언


        - 방법
            1) inline
                ex. <button type="button" onclick="alert('버튼을 클릭했습니다')">클릭</button>
            2) 외부링크
                ex. <script src="script.js"></script>

    - 변수 (feat.상수)
        참고 : 2.변수
        => 타입이 존재 X
        => 같은 변수명에 타입을 여러개 담을 수 없음

        - but. 딱 3개만 존재 why? 변수에 값을 담으면 타입이 생김
            => 변수를 담으면 js 에서 알아서 타입을 설정
            1) let : 변수
            2) const : 상수
                => 변하면 안되는 값들을 담을 때 사용
            3) var (예전방식)
                => 유연한 변수선언 방식

            - function scope : var
                => function 안에서 선언된 값만 부를 수 없게 해놨고 나머진 상관이 없다
                => 오류시, 오류를 찾기 힘들어지는 경우가 생김
            - block-scope : let, const
                => 자바의 지역변수와 같은 내용
                => { } : 같은 변수명이어도 블럭 바깥과 안의 유무에 따라 사용가능
                => 변수 사용의 범위를 명확하게 함
        
        - use strict
            => 상단에 작성
            => 문법의 정확성을 위한 것

        - 변수 범위
            => java의 변수 선언의 범위와 같음
    
    - 자료형
        참고 : datatype

        1) number : 숫자형
        2) string : 문자형
        3) 불린형
        4) null
        5) undefined
            => 선언만 하고 값이 없는 상황
        6) object

    - 연산자
        참고 : operator

        - 산술
            +, -, *, /, %
                => / 만 java와 다름
                => js 는 소숫점 1자리 까지 나옴 but. 자바 : 몫만 나옴
        - 연결
            + : 연결 연산자
                ex. 숫자 + 문자 : 연결
        - 비교



            
