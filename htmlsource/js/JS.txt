<< JS (Java Script) >>
    => 동적 작업 담당
        ex. 버튼 클릭시 메세지 띄우기
    => HTML 안에 작성 가능 : 웹페이지를 불러올 때, 스크립트가 자동 실행
    => 코드는 java 언어와 비슷함
    => 서버에서도 실행 가능 : NodeJS (JS를 서버쪽으로 실행가능하게 만든 것)
    => 자바스크립트 실행(런타임)환경
        1) 브라우저
        2) Node.js
            => 폴더를 기준으로 open in integrated terminal 실행
            => 터미널에 node 파일명.js 입력
            => .js 파일 실행함

    * 위에서 아래로 실행됨
    * 주석 : // (자바와 같음)
    * ( ; ) 의 사용이 필수가 아님
        => 줄바꿈이 있다면 세미콜론 생략가능
        => 엔터의 유무에 따라 js가 알아서 넣어줌
    * '', "" : 둘다 허용 => 문자열 취급
    * ISO 8601 표준표현방법(시간) : 2025-04-07T01:07:21.864Z
    * document.write() : 화면단(body) 에 결과값 찍기
        => 태그 사용 가능
            ex. <h3><h3>, <h2><h2> 등...
    * 디버깅 걸기
        => 실행 후 F12 => 확인 원하는 줄 클릭 => 상단 주소 enter로 재실행 => F10으로 따라가기
    * `` => 자판의 ( ~ )이랑 같이 있는 기호
    * 터미널 멈추기 : ctrl + c

    - 선언위치
        => 선언의 위치 중요!
        1) head tag 안
        2) body tag 안
            => /body(닫는body) 앞쪽에 선언


        - 방법
            1) inline
                ex. <button type="button" onclick="alert('버튼을 클릭했습니다')">클릭</button>
            2) 외부링크
                ex. <script src="script.js"></script>

    - 변수 (feat.상수)
        참고 : 2.변수
        => 타입이 존재 X
        => 같은 변수명에 타입을 여러개 담을 수 없음

        - but. 딱 3개만 존재 why? 변수에 값을 담으면 타입이 생김
            => 변수를 담으면 js 에서 알아서 타입을 설정
            1) let : 변수
            2) const : 상수
                => 변하면 안되는 값들을 담을 때 사용
            3) var (예전방식)
                => 유연한 변수선언 방식

            - function scope : var
                => function 안에서 선언된 값만 부를 수 없게 해놨고 나머진 상관이 없다
                => 오류시, 오류를 찾기 힘들어지는 경우가 생김
            - block-scope : let, const
                => 자바의 지역변수와 같은 내용
                => { } : 같은 변수명이어도 블럭 바깥과 안의 유무에 따라 사용가능
                => 변수 사용의 범위를 명확하게 함
        
        - use strict
            => 상단에 작성
            => 문법의 정확성을 위한 것

        - 변수 범위
            => java의 변수 선언의 범위와 같음
    
    - 자료형
        참고 : datatype

        1) number : 숫자형
        2) string : 문자형
        3) 불린형
        4) null
        5) undefined
            => 선언만 하고 값이 없는 상황
        6) object

    - 연산자
        참고 : operator

        - 산술연산자
            +, -, *, /, %
                    => js 는 / 계산에서 소숫점 1자리 까지 나옴 but. 자바 : 몫만 나옴
        - 연결연산자
            + : 연결 연산자
                ex. 숫자 + 문자 : 연결
            -, /, *, % : 문자와 숫자의 산술연산
                => 연산이 가능! => + 만 연결로 감!
        - 비교연산자
            == : 값 비교
            != : 값 비교 (부정)
            === : 값/타입 비교
            !== : 값/타입 비교 (부정)

        단항연산자
            ++, --

    - 상호작용 함수
        참고 : prompt

        * web 에서 입력들어오는 모든값의 타입 : String

        1) alert() : 사용자에게 메세지 전달
        2) prompt() : 사용자로부터 입력 받기
            => ( , ) : , 앞에 메세지 띄우고 뒤에 기본값을 입력할 수도 있음
            => 입력값 : String
                => 입력값이 string 이기에 + 는 산술이 안되고 연결을 함
        3) confirm : 사용자에게 메세지 전달후 확인/취소 선택
            => 확인 선택 : true
            => 취소 선택 : false

    - 조건문
        참고 : condition, if1,2,3

        true : true 자료들, 0 제외 숫자, '문자', [], {}
        false : false 자료들, 0, '', null, undefined, NaN

            - NaN (Not a Number) : 
                => 숫자 : false
                    => "" 문자열숫자도 숫자로 인식
                => 숫자 제외 : true
                * isNaN() : 숫자 판별기
            - 삼항연산자도 사용가능
            
        * 문자열숫자 => 숫자
            ex. "12" => 12

            1) Number()
                => 문자열을 집어넣을 경우 : NaN 리턴
                => 문자열숫자 여러개 입력시 => NaN
                    ex. Number(78 45 55) => NaN
            2) parseInt()
                => 문자열을 집어넣을 경우 : NaN 리턴
                => 소수점 아래 숫자들을 자른다
                    ex. parseInt(78.65) => 78
                => 문자열숫자 여러개 입력시 => 공백 기준 첫번쨰 숫자만 나옴
                    ex. parseInt("78 45 55") => 78
    
    - 반복문
        참고 : loop

        - for
            1) fori
            2) foreach
                자바 : ->
                JS : =>
            3) for in : 객체 출력에 용이함
                * 객체 담기 : {key: value}
                    key/value 란?
                    => key: value
                * `${변수명}` : 변수 + 문자열 출력시 사용
            4) for of
                => js에서의 향상된 for문 형태
                    => java의 향상된 for문과 같음

        - while
            1) while
            2) doWhile

        - break
            => 반복문 중단
        - continue
    
    - 배열
        참고 : array

        - 배열 생성
            1) 타입 배열명 = [];
                => 다른 타입을 담아도 무관!
            2) 타입 배열명 = new Array();

        - 배열 조회
            1) fori
            2) for of
            3) foreach
            4) 확인용
                => console.log(배열명)
            5) toString
                => console.log(배열명.toString()) : 배열 => 문자열

        - 메서드
            참고 : array2

            1) .length : 길이
            2) .toString() : 배열 => 문자열
            3) .배열명[숫자] : 숫자 순서의 배열 출력
            4) .at(숫자) : 숫자 순서의 배열 출력

            - 추가
            5) push(item) : 뒤에 추가
            6) unshift(item) : 앞에 추가
            7) 배열명[숫자] = item : 해당 숫자 순서의 배열 수정
            8) splice(위치, 삭제할개수, item)
                => 삭제할 개수가 있는 경우 : 해당 위치에 삭제할 개수를 지정해서 삭제
                => 삭제할 개수가 0인 경우 : 삭제 없이 비집고 들어가기

            - 삭제
            9) pop() : 뒤에서 삭제
            10) shift() : 앞에서 삭제
            11) splice(위치, 삭제할 개수)

            - 그 외
                참고 : array3
            12) join() : String 으로 반환
                => toString 은 , 로만 연결
                => () 안에 문자를 넣으면 => item 사이에 넣은 문자 넣고 string 으로 출력
                    => , 이외의 값으로 연결하고 싶은 경우
            13) concat(배열명) : 배열 연결
            14) slice(처음, 끝) : 처음~끝 까지 따로 분할
                => 끝 번호는 포함 X
            15) sort() : 배열 정렬
                => 숫자 정렬시, 숫자의 첫번째 숫자만을 가지고 정렬함
                    ex. 22, 35, 1, 3, 7, 88, 92 => 1,22,3,35,7,88,92
                * 숫자 배열 정렬
                    - .sort((a, b) => a - b) : 오름차순
                    - .sort((a, b) => b - a) : 내림차순
                        => 화살표 함수 사용!
            16) .reverse() : 배열 거꾸로 출력
            17) .indexOf() : 배열 안에서 index 찾기
                => 해당 위치 숫자 리턴
                => 못찾으면 -1 리턴
                lastIndexOf
            18) includes(item) : 해당 item의 포함여부 확인
                => true, false 로 반환
            19) find(조건) : 조건에 해당하는 것을 넣어서 찾기 (화살표 함수 사용)
                => 자바의 predicate 함수와 같음
                => 1개의 값만 찾아옴
            20) findIndex(조건) : 찾기 (화살표 함수 사용)
                => 위 find 의 조건에 일치하는 값 찾고 위치 리턴
            21) map(조건) : 찾기 (화살표 함수 사용)
                => 조건에 맞게 배열 변환 후 새로운 배열로 리턴
            22) flat() : 3차원 배열 => 2차원 배열
                => flat(숫자) : 묶여있는 배열이 숫자만큼 풀려져서 나옴
            23) filter : 조건 검사 (화살표 함수 사용)
                => 조건에 맞는 배열요소 찾아서 새로운 배열로 리턴
        
        - 얕은 복사 / 깊은 복사
            참고 : array3

            - 얕은 복사 (주소 복사)
                let 배열1 = 배열2;
                    => 같은 공간을 가리킴
                    => 배열1 에 변화를 일으키면 배열2에도 영향
            
            - 깊은 복사 (값 복사 => 서로 다른 주소)
                let 배열1 = [...배열2]
                    * ... : spread => 값복사
                    => 배열2의 내용을 새로운 주소값을 부여해서 복사 : 값 복사

        - 동일한 값으로 배열 생성
            참고 : array3

            타입 배열명 = new Array(배열개수).fill(item);
            
        - 배열 합치기
            참고 : array3

            1) concat()
            2) 새로운 배열 = [배열1, 배열2];
                => 3차원 배열이 됨
                => 주소복사

                - 값복사
                    => 배열1, 2 앞에 ...(spread) 붙이기
                    => 위 처럼 3차원 배열이 아닌 값들만 복사가 되므로 2차원 배열이 됨

    - 함수
        참고 : function
        => 함수 == 자바의 메서드

        * function 안의 function은 호출 못함

        - 함수 생성
            1) 함수선언방식
                참고 : function1
                function 이름(매개변수) {
                    해야할 일들 나열
                }
                1. 매개변수가 없는 함수
                2. 매개변수가 있는 함수
                    2-1. console.log 사용
                        => 매개변수는 있는데 값을 안 넣은 경우 => undefined
                    2-2. return 사용
                        => 1. 함수명만 부른 경우 : [Function: mutiply2]
                        => 2. 값을 안 넣은 경우 : NaN
                3. 매개변수 기본값이 있는 함수
            2) 함수표현식
                참고 : function2
                * 함수표현식도 함수이기 때문에 함수명() <- ()괄호 필수!
                1. const 함수명 = function () {};
                2. const 함수명 = function 이름() {};
                    => 호출은 함수명으로만 가능!
                        => 이름은 내부용 => 외부 호출 불가

            - 함수정의방식 비교 (1, 2)
                참고 : function2
                1) 함수선언방식
                    - 호이스팅(hoisting) 허용
                        => 함수를 선언하기 전에 사용
                        => 오류를 잡아내기 힘듬

                    * 호이스팅 허용 형태
                        1. function name() {}
                        2. var 변수
                
                2) 함수표현식
                    - 호이스팅 허용 X

                    * 호이스팅 허용 X 형태
                        1. 함수표현식
                        2. let, const 변수
        
        - 화살표 함수
            참고 : function3

            const name = () => {}
                => function 을 날릴 수 있음
                => 계산 내용이 단순하면 {} 도 날릴 수 있음
                => 화살표 함수 내에서는 this 사용 X
        
        - 콜백함수
            참고 : function4, function1.html
            => 함수를 함수의 인자로 전달, 전달된 함수가 나중에 호출
            => 전달인자(매개변수)를 함수로 던지는 것

        - js 내장함수
            참고 : function5

            * 비동기 : 일정한 시간이 지난 뒤에 시작되는 함수식

            1) setTimeout(조건 , 시간(ms)) : 비동기식
                => ms(밀리세컨드) 단위
                => 지정한 시간이 지나야 조건이 실행됨

                * 함수식
                setTimeout(() => {조건}, ms)
            2) setInterval(조건, 간격시간(interval)) : 비동기식
                => 지정한 간격마다 조건이 실행됨
            3) parseFloat() : String => float
            4) 인코딩 방식
                1. encodeURI()
                2. encodeURIComponentRI
            5) 디코딩 방식
                1. decodeURI()
                2. decodeURIComponent()

    - JS 객체
        참고 : object

        1) 프로퍼티(멤버변수)로 생성

        2) 리털럴로 생성

            - 객체 호출
                => 대괄호 안에 key값을 넣고 접근 가능

                - for..in 사용
                    => key : 이름
                    => value (객체명[key]) : 값

        - JS 제공 객체
            참고 : object 폴더

            - Date
                참고 : date
                * 월(Month) 는 0부터 시작함
                    => +1 해줘야 현재 월이 나옴

                - 메서드
                    1) toLocaleString : 현재 지역에 맞는 string 값
                        => 월(Month) 가 현재의 월에 맞춰서 잘 나옴

            - String
                참고 : string

                - 객체 생성
                    1) 타입 변수명 = new String() : 생성자
                        => new 를 했기 때문에 객체(object) 타입
                        => 타입(주소)이 다르기 때문에 일반적인 문자열과는 타입이 다름
                    2) 타입 변수명 = String() : 함수
                        => string 타입
                        
                - 메서드 (자바와 거의 유사)
                    1) 특정 위치 문자 반환
                        charAt()
                        at()
                    2) 특정 문자 위치 반환
                        indexOf()
                    3) 특정 문자 포함 여부
                        includes()
                    4) 문자열 부분 추출
                        substring()
                        slice()
                            ㄴ 둘의 동작 방식이 다름
                    5) 문자열 연결
                        concat()
                    6) 문자열 변경
                        replace() : 원본이 바뀌지 않음
                    7) 문자열 찾기
                        match()
                            찾으면 => 찾은 문자열 반환
                            없으면 => null
                        search()
                            찾으면 시작 위치 반환
                    8) 문자열 대/소문자 변경
                        toUpperCase() : 대문자
                        toLowerCase() : 소문자
                    9) 공백 제거
                        trim()

            - math
                참고 : math

                * java 와 똑같이 Math.메서드 <- 로 호출

                - 메서드
                    1) 파이(3.14) 값
                        PI
                    2) 내림
                        floor()
                    3) 올림
                        ceil()
                    4) 반올림
                        round()
                    5) 절대값
                        abs()
                    6) 최대값
                        max()
                    7) 최소값
                        min()
                    8) 0 ~ 1 난수
                        random()
                    9) toFixed(n)
                        => 소수점 n번째 자리까지 표시

<< DOM >>
    참고 : dom
    
    * window : 최상위 객체
        => 생략 가능!

    - 브라우저
        참고 : traversal

    - open
        참고 : open
        => 팝업창

        window.open("주소", "", "너비, 높이, 위치 지정")

    - location
        참고 : location

        - 메서드
            1) window.location.reload()
                => 현재 url 재로딩
            2) window.location.replace("이동할 주소")
                => 주소의 경로를 재설정
                => 처음 페이지로의 이동(back) 이 불가능
                    ex. location.html => http://www.naver.com : naver에서 location.html 로 뒤로가기 X
            3) window.location.href = "이동할 주소"
                => 주소의 경로를 재설정

    - history
        참고 : history
        => 인터넷 창의 뒤로가기/앞으로가기

        * <button onclick="JS함수 입력가능"
        * 상호작용의 발생 => 이벤트
            ex. 버튼을 누른다 등...

        - 메서드
            1) back() : 이전으로
            2) forward() : 다음으로
            3) go() : 지정된 만큼

        - 동작 순서
        1. HTML, CSS 파싱(분석)
        2. HTML => DOM 트리 생성 / CSS=> CSSON 트리 생성
        3. JS에서 DOM 트리 접근 가능
                  document
                     |
                    html
                     |
                |----------|
                head    body
                         |
                         p

    - DOM 트리 접근
        참고 : traversal
        => 태그요소(노드) 접근

        * #text : 엔터
            => 텍스트노드

            1) 프로퍼티 이용
                childNodes : 공백(텍스트노드)을 포함한 모든 자식을 가지고 있음
                children : 요소(태그)노드만 가지고 있음
                    => for..of 함수가 가져오기 편함

        - 요소 가져오기
            참고 : getElementId, bootstrap/boot1.js

            * HTML Collection : 배열 같은 애들

            - 메서드
                - 방법 1 (간단한 경우)
                    1. parentNode
                    parentElement
                    2. firstChild
                    firstElementChild
                    3. lastChild
                    lastElementChild
                    4. nextSibling
                    nextElementSibling

                - 방법 2
                    getElementById : id 요소를 통해서 가져오기

                - id 없는 요소 가져오기
                    1. getElementsByClassName : 
                        => elements 애들은 전부 HTML Collection 으로 찾아옴
                        => 전부 가져오기 때문에 name[0] 같은식으로 호출

                - 그 외

                    1) textContent : 태그 안의 text 가져오기
                        => 재선언은 가능 but. 태그 까지 같이 재선언은 불가능
                    2) innerHTML : 태그 + 텍스트 가져오기
                        => 태그 안에 내용을 한번에 바꿔버림
                    3) id : id 속성 값 가져오기
                    * class : undefined => 여기의 방식으로는 가져올 수 없음
                        => 대신
                            방법 1 : classList 사용
                            방법 2 : getAttribute("속성명")
                                - getAttribute()
                                    => img, a 의 경로를 가져올때 일반적인 img(a).src : 절대경로
                                        => getAttribute 사용 : 상대경로
                    4) nodeValue : 해당 태그 요소의 텍스트만 건듬 (뒤의 태그들을 건들지 않음)
                    5) closest("선택자") : 부모에서 제일 가까운 요소 찾기
                    6) dataset.속성 : data- 속성 가져오기

                - css 선택자를 이용해서 찾기
                    1) querySelector() : 조건에 맞는 첫번째 요소 찾아옴
                    2) querySelectorAll() => NodeList : 조건에 맞는 모든 요소 찾아옴

        - 동적으로 구성하기

            - 이벤트
                참고 : remove1, event, bubble, submit
                => 이벤트 발생 (Listener)
                => Listener에게 무슨 행동을 취할지 코드를 작성해서 이벤트 발생시 실행시킴

                * 이벤트란?
                    => 사이트에서 방문자가 취하는 모든 행위, 마우스 드래그, 클릭, 더블클릭, 입력 등...
                * 함수 자리에 function 호출문을 넣으면 안됨!
                    ex. addEventListener("이벤트명", name()) : 불가
                        => addEventListener("이벤트명", () => name()) : 가능
                * 이벤트 버블링
                    => 하위에서 발생한 이벤트가 상위요소로 전파되는 개념

                1) 이벤트 핸들러 속성 이용
                    => 태그에 직접 on~ 으로 시작하는 속성을 부여
                    => 요즘의 추세는 스크립트에 직접 js 를 부여하는 것을 원치 않음
                    => react 에서는 사용
                
                2) 이벤트 리스너 이용
                    - 작성
                        1) 이벤트 대상 찾기
                        2) name.addEventListener("이벤트명", 함수)
                            * 함수 : () => {}
                                => () 안에 e 많이 사용
                                    - e 의 사용처
                                        1. target : 실제 이벤트가 일어난 대상 가져오기
                                        2. 이벤트 발생 대상의 부모요소 가져오기
                                        3. preventDefault : 이벤트 중지
                                        4. currentTarget : 이벤트 버블링으로 이벤트가 발생한 모든 요소

                    - 이벤트명 메서드
                        1) click : 클릭시 동작
                            => 글자에도 걸 수 있음
                            => a 태그 처럼 url 이동하는 경우에는 먼저 preventDefault 로 이동을 막고 해야 가능
                        2) submit
                            참고 : submit
                            => form 요소에 일어남
                            * form 요소에서 일어나는 거지 button 같은 것에서 일어나는게 아님!
                        3) change
                            참고 : change
                            => 조건에 맞는 변화를 일으킴
                            => 요소 변경이 끝나면(focus를 빼면)
                                => blur와 달리 기본값에 변화가 없다면 value의 기본값을 유지
                        4) input
                            참고 : change
                            => 값을 수정할 때마다 발생
                        5) blur
                            참고 : change
                            => 기본값에 대해서도 이벤트 발생
                        6) mouse
                            참고 : mouse
                            => 마우스와 관련된 이벤트

                            1. mousedown / mouseup
                                => 마우스 왼쪽 버튼 누르고 있다가 뗄 때
                            2. mouseover / mouseout
                                => 마우스 커서가 요소 바깥에 있다가 요소 안으로 움직일 때
                                => 마우스 커서가 요소 안에 있다가 요소 밖으로 움직일 때
                            3. mousemove
                                => 마우스가 움직일 때
                            4. click / dbclick(double click)
                            5. contextmenu
                                => 마우스 오른쪽 버튼 눌렀을 때
                        7) keyboard
                            참고 : keyboard
                            => 키보드와 관련된 이벤트

                            * keyCode : 키보드 키들의 숫자들
                                ex. a : 65 / 엔터 : 13 등...

                            1. keydown
                                => 키를 누를때
                            2. keyup
                                => 키에서 손을 뗄 때
                        8) load
                            참고 : load
                            => 문서 로드 완료시, 코드 수행하기
                            
                            방법 1. DOMContentLoaded
                                => document 에 이벤트 생성
                            방법 2. window.onload
                                => 이벤트 생성 함수처럼 생성해서
                        9) scroll
                            참고 : scroll
                            => 스크롤 움직임을 감지
                            * widow 에 이벤트 add

                            - 관련 함수
                                1. scrollX : X값의 위치값
                                2. scrollY : Y값의 위치값
                                3. scrollTo(값1, 값2) : 값2 에 scroll 고정
                                4. scrollBy(값1, 값2) : 현재위치에서 값2만큼 scroll 움직이기
                                5. scrollHeight : 해당 태그의 지정된 높이 + 스크롤 높이
                                6. clientHeight : 해당 태그의 지정된 높이
                                7. scrollTop : 세로스크롤이 아래로 움직일 때마다 가려진 영역의 높이
                                8. innerHeight : 브라우저 body 높이 (도구창 등을 제외한 높이)
                                9. outerHeight : 브라우저 전체 높이 (도구창 등 모든 창 포함)

            - 생성
                참고 : create
                => 새로운 내용을 넣기

                * elements 탭 : 동적인 작업, css 작업 보는 탭
                * sources 탭 : 개발자가 처음에 작성한 소스 보는 탭

                - 메서드
                    1) insertAdjacentElement
                        - 스크립트에서 요소를 만드는 표준 방식
                            타입 name = document.createElement();
                            name.textContent = ""
                            insertAdjacentElement("순번", name)
                    2) insertAdjacentHTML
                        => 직접 작성(문자열)해서 넣는 형태
                    3) insertAdjacentText

                    - 공통 
                        1. afterbegin : element의 첫번째 자식으로 삽입
                        2. afterend : element의 다음 형제 요소로 삽입
                        3. beforebegin : element의 이전 형제 요소로 삽입
                        4. beforeend : element의 마지막 자식으로 삽입
        
            - 삭제
                참고 : remove
            
                - 메서드
                    1) remove() : 해당 조건 제거
                    2) removeChild() : 해당 요소 자손 제거
                    3) removeAttribute() : 속성을 아예 제거
                    4) 값만 제거
                        1. name.속성 = "";
                        2. setAttribute("속성", "");

            - 수정
                참고 : update

                - style 수정
                    => 스크립트 단의 CSS 접근
                        name.style

                    * CSS 단에서는 ( - ) 사용 가능
                        => but. 스크립트 단에서는 ( - ) 사용 불가능
                        => 스크립트 단에서는 다른 방식으로 사용
                            ex. CSS : font-size => 스크립트 : fontSize

                - 메서드
                    1) replace("원본", "수정본")
                    2) 추가 : 속성은 자동으로 스페이스바 입력해서 들어감
                        add("추가본")
                        toggle("추가본") : 추가본이 속성에 없으면 : 추가 / 있으면 : 제거