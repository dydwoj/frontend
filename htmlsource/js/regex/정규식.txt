<< REGEX >>
    Regular Expression : 정규표현식
        => 문자검색, 교체에 사용되는 패턴
        => 패턴과 플래그를 같이 조합해서 사용해야 함
    
        * 패턴은 이미 정의 되어 있음
    
    - 패턴 생성
        참고 : 구글(regex) 검색

        => /기호/g

    - 플래그
        1) g (global) : 전역검색
        2) i (case insensitive) : 대소문자 구별 없는 검색
        3) m (multiline) : 다중행 검색
            => 줄(문단)마다 부여하고 싶은 경우
        4) s (single line)
        5) y (sticky)

    - 패턴  

        * WARNING : 없어도 된다
        * 정규식 기호는 / 로 씀
            => 일반 / 는 인식이 안됨
            => 그래서 그냥 슬래시라고 하기 위해서 \/ 으로 표현

        1) . : 문자, 공백, 기호 등 어떤 문자와도 매칭
            => \. : 마침표 찾기
            ex1) \..\. : .A., .가.
                => . 과 . 사이에 무엇이든 있으면 찾아줌
            ex2) o. : o로 시작하고 뒤에 무엇이든 있으면 찾아줌

        2) [] : 대괄호 안에 들어있는 문자 개별로 매칭
            ex1) [abc] : a 따로 b 따로 c 따로
            ex2) [abc][sre] : 앞에서 하나 + 뒤에서 하나 => 합쳐서 나오는 모든 패턴
            ex4) [A-Z] : 대문자 26자 의미
            ex5) [a-z] : 소문자 26자 의미
                => => i 를 사용하면 훨씬 간편
            ex6) [가-힣] : 한글 의미

        3) () : 캡쳐링, 그룹의 이미
           (?:) : 비캡쳐링
            => 캡처링을 해서 match 를 시키면 찾는 문자를 () 묶은대로 배열로 저장
            * 캡쳐링 : 캡쳐를 해놨다, 보관을 해놨다는 의미
            ex1) (on|ues|rida) : 문자 안에 on or ues or rida 가 포함된
                => ex1+) (on|ues|rida)day : on or ues or rida + day 가 포함된
            ex2) ..(id|esd|nd)ay : 모든 + 모든 + id or esd or nd + ay 가 포함된


        4) [^패턴] : 제외하는
            ex1) [^a-z] : 소문자 제외 모든 것
        
        - 기호

        1) | : or

        2) \w : [A-Za-z0-9_] 의 의미
           \W : [^A-Za-z0-9_] 의 의미

        3) \s : 공백
           \S : 공백을 제외한
            => spaces, tabs, line breaks
        
        4) \d : 숫자
           \D : 숫자를 제외한

        5) ^ : 시작하는 ([]안이 아닌)
           $ : 끝나는
                => 문단마다 확인이 필요하기에 m 플래그 필요

        - 수량

            1) + : 최소 1 ~ 최대 무제한
                ex1) [a-z]+ : 소문자 최소 1 ~ 최대 무제한
                    => 기본 [a-z] 는 개별로 잡았으나 [a-z]+ 는 공백 전까지 잡아줌

            2) * : 최소 0 ~ 최대 무제한
                ex1) [a-z]* : 소문자 최소 0 ~ 최대 무제한
                    => 0 이므로 없어도 되는 상황이 왔기에 "WARNING" 뜸

            3) ? : 최소 0 ~ 최대 1

            4) {숫자} : 지정된 숫자만 허용

            5) {숫자1, 숫자2} : 최소 숫자1 ~ 최대 숫자2

            6) {숫자1,} : 최소 숫자1 ~ 최대 무제한

    - 적극적(탐욕적) 일치와 소극적(lazy) 일치
        default : 적극적(탐욕적) 일치 방식

            ex) 문자열 : <i>greddy</i> and <i>lazy</i> matching
                정규식 : <i>.+<\/i> : i 태그 추출
                결과 : <i>greddy</i> and <i>lazy</i>
                    => 최대 매치로 인해서 맨앞의 <i> ~ 맨뒤의 <\/i> 까지 찾음
                        => 적극적 일치

        - 소극적 일치 사용

            ex) 문자열 : <i>greddy</i> and <i>lazy</i> matching
                정규식 : <i>.+?<\/i> : i 태그 추출
                결과 : <i>greddy</i>, <i>lazy</i>
                    => 최대 매치로 인해서 맨앞의 <i> ~ 맨뒤의 <\/i> 까지 찾음
                        => 소극적 일치
    << JS 정규표현식 >>
        참고 : regex

        - 정규식 생성
            참고 : regex1

            1) /패턴/플래그
            2) new RegExp("패턴", "플래그")
                => 객체로 생성하는 방법

            => 1번 방법을 선호

            - 메서드

                - 정규식 메서드
                    1) exec()
                        => 일치하는 문자열 반환
                    2) test()
                        => 패턴과 일치하면 true / 불일치하면 false 반환
                
                - string 메서드
                    1) match()
                        => exec() 와 동일한 개념
                        => 정규식 메서드를 사용하냐, string 메서드를 사용하냐의 차이
                    2) search()
                        => 패턴이 시작하는 인덱스 반환
                    3) replace()
                    4) split()